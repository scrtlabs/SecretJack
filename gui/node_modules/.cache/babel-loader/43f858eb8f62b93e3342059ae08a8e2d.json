{"ast":null,"code":"import _objectSpread from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lior/work/blackjack-react-app/src/components/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport Hands from './Hands';\nimport jsonData from '../deck.json';\n\nconst App = () => {\n  let GameState;\n\n  (function (GameState) {\n    GameState[GameState[\"bet\"] = 0] = \"bet\";\n    GameState[GameState[\"init\"] = 1] = \"init\";\n    GameState[GameState[\"userTurn\"] = 2] = \"userTurn\";\n    GameState[GameState[\"dealerTurn\"] = 3] = \"dealerTurn\";\n  })(GameState || (GameState = {}));\n\n  let Deal;\n\n  (function (Deal) {\n    Deal[Deal[\"p0\"] = 0] = \"p0\";\n    Deal[Deal[\"p1\"] = 1] = \"p1\";\n    Deal[Deal[\"p2\"] = 2] = \"p2\";\n    Deal[Deal[\"p3\"] = 3] = \"p3\";\n    Deal[Deal[\"p4\"] = 4] = \"p4\";\n    Deal[Deal[\"p5\"] = 5] = \"p5\";\n    Deal[Deal[\"dealer\"] = 6] = \"dealer\";\n    Deal[Deal[\"hidden\"] = 7] = \"hidden\";\n  })(Deal || (Deal = {}));\n\n  let Message;\n\n  (function (Message) {\n    Message[\"bet\"] = \"Place a Bet!\";\n    Message[\"hitStand\"] = \"Hit or Stand?\";\n    Message[\"bust\"] = \"Bust!\";\n    Message[\"userWin\"] = \"You Win!\";\n    Message[\"dealerWin\"] = \"Dealer Wins!\";\n    Message[\"tie\"] = \"Tie!\";\n  })(Message || (Message = {}));\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n\n  const _useState = useState(data),\n        _useState2 = _slicedToArray(_useState, 2),\n        deck = _useState2[0],\n        setDeck = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        address = _useState4[0],\n        setAddress = _useState4[1];\n\n  const _useState5 = useState([[], [], [], [], [], []]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        cards = _useState6[0],\n        setCards = _useState6[1];\n\n  const _useState7 = useState([0, 0, 0, 0, 0, 0]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        scores = _useState8[0],\n        setScores = _useState8[1];\n\n  const _useState9 = useState([0, 0, 0, 0, 0, 0]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        counts = _useState10[0],\n        setCounts = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        dealerCards = _useState12[0],\n        setDealerCards = _useState12[1];\n\n  const _useState13 = useState(0),\n        _useState14 = _slicedToArray(_useState13, 2),\n        dealerScore = _useState14[0],\n        setDealerScore = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        dealerCount = _useState16[0],\n        setDealerCount = _useState16[1];\n\n  const _useState17 = useState(100),\n        _useState18 = _slicedToArray(_useState17, 2),\n        balance = _useState18[0],\n        setBalance = _useState18[1];\n\n  const _useState19 = useState(0),\n        _useState20 = _slicedToArray(_useState19, 2),\n        bet = _useState20[0],\n        setBet = _useState20[1];\n\n  const _useState21 = useState(GameState.init),\n        _useState22 = _slicedToArray(_useState21, 2),\n        gameState = _useState22[0],\n        setGameState = _useState22[1];\n\n  const _useState23 = useState(Message.bet),\n        _useState24 = _slicedToArray(_useState23, 2),\n        message = _useState24[0],\n        setMessage = _useState24[1];\n\n  const _useState25 = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  }),\n        _useState26 = _slicedToArray(_useState25, 2),\n        buttonState = _useState26[0],\n        setButtonState = _useState26[1];\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    let temp_counts = counts;\n    let temp_scores = scores;\n\n    for (var i = 0; i < 6; i++) {\n      temp_scores[i] = calculate(cards[i]);\n      temp_counts[i] = cards[i].length;\n    }\n  }, [cards]);\n  useEffect(() => {\n    setDealerScore(calculate(dealerCards));\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (scores[0] === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState(_objectSpread({}, buttonState));\n      } else if (scores[0] > 21) {\n        bust();\n      }\n    }\n  }, [counts]);\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      } else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n    setCards([[], [], [], [], [], []]);\n    setScores([0, 0, 0, 0, 0, 0]);\n    setCounts([0, 0, 0, 0, 0, 0]);\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n    setBet(0);\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  };\n\n  const placeBet = amount => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  };\n\n  const drawCard = dealType => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      alert('All cards have been drawn');\n    }\n  };\n\n  const dealCard = (dealType, value, suit) => {\n    switch (dealType) {\n      case Deal.p0:\n        cards[0].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.p1:\n        cards[1].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.p2:\n        cards[2].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.p3:\n        cards[3].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.p4:\n        cards[4].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.p5:\n        cards[5].push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setCards(cards);\n        break;\n\n      case Deal.dealer:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      case Deal.hidden:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': true\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const revealCard = () => {\n    dealerCards.filter(card => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n\n      return card;\n    });\n    setDealerCards([...dealerCards]);\n  };\n\n  const calculate = cards => {\n    let total = 0;\n    cards.forEach(card => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n\n          case 'Q':\n            total += 10;\n            break;\n\n          case 'J':\n            total += 10;\n            break;\n\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter(card => {\n      return card.value === 'A';\n    });\n    aces.forEach(card => {\n      if (card.hidden === false) {\n        if (total + 11 > 21) {\n          total += 1;\n        } else if (total + 11 === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          } else {\n            total += 11;\n          }\n        } else {\n          total += 11;\n        }\n      }\n    });\n    return total;\n  };\n\n  const hit = () => {\n    drawCard(Deal.p0);\n    drawCard(Deal.p1);\n    drawCard(Deal.p2);\n    drawCard(Deal.p3);\n    drawCard(Deal.p4);\n    drawCard(Deal.p5);\n  };\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  };\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setMessage(Message.bust);\n  };\n\n  const checkWin = () => {\n    if (scores[0] > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + bet * 2) * 100) / 100);\n      setMessage(Message.userWin);\n    } else if (dealerScore > scores[0]) {\n      setMessage(Message.dealerWin);\n    } else {\n      setBalance(Math.round((balance + bet * 1) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Status, {\n    message: message,\n    balance: balance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    balance: balance,\n    gameState: gameState,\n    buttonState: buttonState,\n    betEvent: placeBet,\n    hitEvent: hit,\n    standEvent: stand,\n    resetEvent: resetGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }), React.createElement(Hand, {\n    title: `Dealer's Hand (${dealerScore})`,\n    cards: dealerCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }), React.createElement(Hands, {\n    cardsArr: cards,\n    scores: scores,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lior/work/blackjack-react-app/src/components/App.tsx"],"names":["React","useState","useEffect","Status","Controls","Hand","Hands","jsonData","App","GameState","Deal","Message","data","JSON","parse","stringify","cards","deck","setDeck","address","setAddress","setCards","scores","setScores","counts","setCounts","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","balance","setBalance","bet","setBet","init","gameState","setGameState","message","setMessage","hitDisabled","standDisabled","resetDisabled","buttonState","setButtonState","userTurn","hitStand","temp_counts","temp_scores","i","calculate","length","bust","dealerTurn","checkWin","drawCard","dealer","resetGame","console","clear","placeBet","amount","Math","round","dealType","randomIndex","floor","random","card","splice","log","suit","dealCard","value","alert","p0","push","p1","p2","p3","p4","p5","hidden","revealCard","filter","total","forEach","Number","aces","hit","stand","userWin","dealerWin","tie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport Hands from './Hands';\nimport jsonData from '../deck.json';\n\nconst App: React.FC = () => {\n  enum GameState {\n    bet,\n    init,\n    userTurn,\n    dealerTurn\n  }\n\n  enum Deal {\n    p0,\n    p1,\n    p2,\n    p3,\n    p4,\n    p5,\n    dealer,\n    hidden\n  }\n\n  enum Message {\n    bet = 'Place a Bet!',\n    hitStand = 'Hit or Stand?',\n    bust = 'Bust!',\n    userWin = 'You Win!',\n    dealerWin = 'Dealer Wins!',\n    tie = 'Tie!'\n  }\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n  const [deck, setDeck]: any[] = useState(data);\n\n  const [address, setAddress] = useState(\"\");\n\n  const [cards, setCards]: any[] = useState([[],[],[],[],[],[]]);\n  const [scores, setScores]: any[] = useState([0,0,0,0,0,0]);\n  const [counts, setCounts]: any[] = useState([0,0,0,0,0,0]);\n\n  const [dealerCards, setDealerCards]: any[] = useState([]);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [dealerCount, setDealerCount] = useState(0);\n\n  const [balance, setBalance] = useState(100);\n  const [bet, setBet] = useState(0);\n\n  const [gameState, setGameState] = useState(GameState.init);\n  const [message, setMessage] = useState(Message.bet);\n  const [buttonState, setButtonState] = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    let temp_counts = counts;\n    let temp_scores = scores;\n\n    for (var i:number = 0; i < 6; i++) {\n      temp_scores[i] = calculate(cards[i]);\n      temp_counts[i] = cards[i].length;\n    }\n  }, [cards]);\n\n  useEffect(() => {\n    setDealerScore(calculate(dealerCards));\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (scores[0] === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState({ ...buttonState });\n      }\n      else if (scores[0] > 21) {\n        bust();\n      }\n    }\n  }, [counts]);\n\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      }\n      else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n\n    setCards([[], [], [], [], [], []]);\n    setScores([0,0,0,0,0,0]);\n    setCounts([0,0,0,0,0,0]);\n\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n\n    setBet(0);\n\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  }\n\n  const placeBet = (amount: number) => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  }\n\n  const drawCard = (dealType: Deal) => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n        default:\n          break;\n      }\n    }\n    else {\n      alert('All cards have been drawn');\n    }\n  }\n\n  const dealCard = (dealType: Deal, value: string, suit: string) => {\n    switch (dealType) {\n      case Deal.p0:\n        cards[0].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.p1:\n        cards[1].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.p2:\n        cards[2].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.p3:\n        cards[3].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.p4:\n        cards[4].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.p5:\n        cards[5].push({ 'value': value, 'suit': suit, 'hidden': false });\n        setCards(cards);\n        break;\n      case Deal.dealer:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setDealerCards([...dealerCards]);\n        break;\n      case Deal.hidden:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\n        setDealerCards([...dealerCards]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const revealCard = () => {\n    dealerCards.filter((card: any) => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n      return card;\n    });\n    setDealerCards([...dealerCards])\n  }\n\n  const calculate = (cards: any[]) => {\n    let total = 0;\n    cards.forEach((card: any) => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n          case 'Q':\n            total += 10;\n            break;\n          case 'J':\n            total += 10;\n            break;\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter((card: any) => {\n      return card.value === 'A';\n    });\n    aces.forEach((card: any) => {\n      if (card.hidden === false) {\n        if ((total + 11) > 21) {\n          total += 1;\n        }\n        else if ((total + 11) === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          }\n          else {\n            total += 11;\n          }\n        }\n        else {\n          total += 11;\n        }\n      }\n    });\n\n    return total;\n  }\n\n  const hit = () => {\n    drawCard(Deal.p0);\n    drawCard(Deal.p1);\n    drawCard(Deal.p2);\n    drawCard(Deal.p3);\n    drawCard(Deal.p4);\n    drawCard(Deal.p5);\n  }\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  }\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setMessage(Message.bust);\n  }\n\n  const checkWin = () => {\n    if (scores[0] > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + (bet * 2)) * 100) / 100);\n      setMessage(Message.userWin);\n    }\n    else if (dealerScore > scores[0]) {\n      setMessage(Message.dealerWin);\n    }\n    else {\n      setBalance(Math.round((balance + (bet * 1)) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  }\n\n  return (\n    <>\n      <Status message={message} balance={balance} />\n      <Controls\n        balance={balance}\n        gameState={gameState}\n        buttonState={buttonState}\n        betEvent={placeBet}\n        hitEvent={hit}\n        standEvent={stand}\n        resetEvent={resetGame}\n      />\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\n      <Hands cardsArr= {cards} scores= {scores}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}