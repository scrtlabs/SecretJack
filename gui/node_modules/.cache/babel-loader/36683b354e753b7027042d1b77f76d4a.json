{"ast":null,"code":"import _objectSpread from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lior/work/blackjack-react-app/src/components/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport jsonData from '../deck.json';\n\nconst App = () => {\n  let GameState;\n\n  (function (GameState) {\n    GameState[GameState[\"bet\"] = 0] = \"bet\";\n    GameState[GameState[\"init\"] = 1] = \"init\";\n    GameState[GameState[\"userTurn\"] = 2] = \"userTurn\";\n    GameState[GameState[\"dealerTurn\"] = 3] = \"dealerTurn\";\n  })(GameState || (GameState = {}));\n\n  let Deal;\n\n  (function (Deal) {\n    Deal[Deal[\"user\"] = 0] = \"user\";\n    Deal[Deal[\"dealer\"] = 1] = \"dealer\";\n    Deal[Deal[\"hidden\"] = 2] = \"hidden\";\n  })(Deal || (Deal = {}));\n\n  let Message;\n\n  (function (Message) {\n    Message[\"bet\"] = \"Place a Bet!\";\n    Message[\"hitStand\"] = \"Hit or Stand?\";\n    Message[\"bust\"] = \"Bust!\";\n    Message[\"userWin\"] = \"You Win!\";\n    Message[\"dealerWin\"] = \"Dealer Wins!\";\n    Message[\"tie\"] = \"Tie!\";\n  })(Message || (Message = {}));\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n\n  const _useState = useState(data),\n        _useState2 = _slicedToArray(_useState, 2),\n        deck = _useState2[0],\n        setDeck = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userCards = _useState4[0],\n        setUserCards = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userScore = _useState6[0],\n        setUserScore = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        userCount = _useState8[0],\n        setUserCount = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        dealerCards = _useState10[0],\n        setDealerCards = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        dealerScore = _useState12[0],\n        setDealerScore = _useState12[1];\n\n  const _useState13 = useState(0),\n        _useState14 = _slicedToArray(_useState13, 2),\n        dealerCount = _useState14[0],\n        setDealerCount = _useState14[1];\n\n  const _useState15 = useState(100),\n        _useState16 = _slicedToArray(_useState15, 2),\n        balance = _useState16[0],\n        setBalance = _useState16[1];\n\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        bet = _useState18[0],\n        setBet = _useState18[1];\n\n  const _useState19 = useState(GameState.bet),\n        _useState20 = _slicedToArray(_useState19, 2),\n        gameState = _useState20[0],\n        setGameState = _useState20[1];\n\n  const _useState21 = useState(Message.bet),\n        _useState22 = _slicedToArray(_useState21, 2),\n        message = _useState22[0],\n        setMessage = _useState22[1];\n\n  const _useState23 = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  }),\n        _useState24 = _slicedToArray(_useState23, 2),\n        buttonState = _useState24[0],\n        setButtonState = _useState24[1];\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      drawCard(Deal.user);\n      drawCard(Deal.hidden);\n      drawCard(Deal.user);\n      drawCard(Deal.dealer);\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    calculate(userCards, setUserScore);\n    setUserCount(userCount + 1);\n  }, [userCards]);\n  useEffect(() => {\n    calculate(dealerCards, setDealerScore);\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (userScore === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState(_objectSpread({}, buttonState));\n      } else if (userScore > 21) {\n        bust();\n      }\n    }\n  }, [userCount]);\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      } else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n    setUserCards([]);\n    setUserScore(0);\n    setUserCount(0);\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n    setBet(0);\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  };\n\n  const placeBet = amount => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  };\n\n  const drawCard = dealType => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      alert('All cards have been drawn');\n    }\n  };\n\n  const dealCard = (dealType, value, suit) => {\n    switch (dealType) {\n      case Deal.user:\n        userCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setUserCards([...userCards]);\n        break;\n\n      case Deal.dealer:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      case Deal.hidden:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': true\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const revealCard = () => {\n    dealerCards.filter(card => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n\n      return card;\n    });\n    setDealerCards([...dealerCards]);\n  };\n\n  const calculate = (cards, setScore) => {\n    let total = 0;\n    cards.forEach(card => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n\n          case 'Q':\n            total += 10;\n            break;\n\n          case 'J':\n            total += 10;\n            break;\n\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter(card => {\n      return card.value === 'A';\n    });\n    aces.forEach(card => {\n      if (card.hidden === false) {\n        if (total + 11 > 21) {\n          total += 1;\n        } else if (total + 11 === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          } else {\n            total += 11;\n          }\n        } else {\n          total += 11;\n        }\n      }\n    });\n    setScore(total);\n  };\n\n  const hit = () => {\n    drawCard(Deal.user);\n  };\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  };\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setMessage(Message.bust);\n  };\n\n  const checkWin = () => {\n    if (userScore > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + bet * 2) * 100) / 100);\n      setMessage(Message.userWin);\n    } else if (dealerScore > userScore) {\n      setMessage(Message.dealerWin);\n    } else {\n      setBalance(Math.round((balance + bet * 1) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Status, {\n    message: message,\n    balance: balance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    balance: balance,\n    gameState: gameState,\n    buttonState: buttonState,\n    betEvent: placeBet,\n    hitEvent: hit,\n    standEvent: stand,\n    resetEvent: resetGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }), React.createElement(Hand, {\n    title: `Dealer's Hand (${dealerScore})`,\n    cards: dealerCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(Hand, {\n    title: `Your Hand (${userScore})`,\n    cards: userCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lior/work/blackjack-react-app/src/components/App.tsx"],"names":["React","useState","useEffect","Status","Controls","Hand","jsonData","App","GameState","Deal","Message","data","JSON","parse","stringify","cards","deck","setDeck","userCards","setUserCards","userScore","setUserScore","userCount","setUserCount","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","balance","setBalance","bet","setBet","gameState","setGameState","message","setMessage","hitDisabled","standDisabled","resetDisabled","buttonState","setButtonState","init","drawCard","user","hidden","dealer","userTurn","hitStand","calculate","bust","dealerTurn","checkWin","resetGame","console","clear","placeBet","amount","Math","round","dealType","length","randomIndex","floor","random","card","splice","log","suit","dealCard","value","alert","push","revealCard","filter","setScore","total","forEach","Number","aces","hit","stand","userWin","dealerWin","tie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport jsonData from '../deck.json';\n\nconst App: React.FC = () => {\n  enum GameState {\n    bet,\n    init,\n    userTurn,\n    dealerTurn\n  }\n\n  enum Deal {\n    user,\n    dealer,\n    hidden\n  }\n\n  enum Message {\n    bet = 'Place a Bet!',\n    hitStand = 'Hit or Stand?',\n    bust = 'Bust!',\n    userWin = 'You Win!',\n    dealerWin = 'Dealer Wins!',\n    tie = 'Tie!'\n  }\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n  const [deck, setDeck]: any[] = useState(data);\n\n  const [userCards, setUserCards]: any[] = useState([]);\n  const [userScore, setUserScore] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n\n  const [dealerCards, setDealerCards]: any[] = useState([]);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [dealerCount, setDealerCount] = useState(0);\n\n  const [balance, setBalance] = useState(100);\n  const [bet, setBet] = useState(0);\n\n  const [gameState, setGameState] = useState(GameState.bet);\n  const [message, setMessage] = useState(Message.bet);\n  const [buttonState, setButtonState] = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      drawCard(Deal.user);\n      drawCard(Deal.hidden);\n      drawCard(Deal.user);\n      drawCard(Deal.dealer);\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    calculate(userCards, setUserScore);\n    setUserCount(userCount + 1);\n  }, [userCards]);\n\n  useEffect(() => {\n    calculate(dealerCards, setDealerScore);\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (userScore === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState({ ...buttonState });\n      }\n      else if (userScore > 21) {\n        bust();\n      }\n    }\n  }, [userCount]);\n\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      }\n      else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n\n    setUserCards([]);\n    setUserScore(0);\n    setUserCount(0);\n\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n\n    setBet(0);\n\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  }\n\n  const placeBet = (amount: number) => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  }\n\n  const drawCard = (dealType: Deal) => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n        default:\n          break;\n      }\n    }\n    else {\n      alert('All cards have been drawn');\n    }\n  }\n\n  const dealCard = (dealType: Deal, value: string, suit: string) => {\n    switch (dealType) {\n      case Deal.user:\n        userCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setUserCards([...userCards]);\n        break;\n      case Deal.dealer:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setDealerCards([...dealerCards]);\n        break;\n      case Deal.hidden:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\n        setDealerCards([...dealerCards]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const revealCard = () => {\n    dealerCards.filter((card: any) => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n      return card;\n    });\n    setDealerCards([...dealerCards])\n  }\n\n  const calculate = (cards: any[], setScore: any) => {\n    let total = 0;\n    cards.forEach((card: any) => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n          case 'Q':\n            total += 10;\n            break;\n          case 'J':\n            total += 10;\n            break;\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter((card: any) => {\n      return card.value === 'A';\n    });\n    aces.forEach((card: any) => {\n      if (card.hidden === false) {\n        if ((total + 11) > 21) {\n          total += 1;\n        }\n        else if ((total + 11) === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          }\n          else {\n            total += 11;\n          }\n        }\n        else {\n          total += 11;\n        }\n      }\n    });\n    setScore(total);\n  }\n\n  const hit = () => {\n    drawCard(Deal.user);\n  }\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  }\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setMessage(Message.bust);\n  }\n\n  const checkWin = () => {\n    if (userScore > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + (bet * 2)) * 100) / 100);\n      setMessage(Message.userWin);\n    }\n    else if (dealerScore > userScore) {\n      setMessage(Message.dealerWin);\n    }\n    else {\n      setBalance(Math.round((balance + (bet * 1)) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  }\n\n  return (\n    <>\n      <Status message={message} balance={balance} />\n      <Controls\n        balance={balance}\n        gameState={gameState}\n        buttonState={buttonState}\n        betEvent={placeBet}\n        hitEvent={hit}\n        standEvent={stand}\n        resetEvent={resetGame}\n      />\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\n      <Hand title={`Your Hand (${userScore})`} cards={userCards} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}