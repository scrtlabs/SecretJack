{"ast":null,"code":"import _objectSpread from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/lior/work/blackjack-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lior/work/blackjack-react-app/src/components/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport Hands from './Hands';\nimport jsonData from '../deck.json';\n\nconst App = () => {\n  let GameState;\n\n  (function (GameState) {\n    GameState[GameState[\"bet\"] = 0] = \"bet\";\n    GameState[GameState[\"init\"] = 1] = \"init\";\n    GameState[GameState[\"userTurn\"] = 2] = \"userTurn\";\n    GameState[GameState[\"dealerTurn\"] = 3] = \"dealerTurn\";\n  })(GameState || (GameState = {}));\n\n  let Deal;\n\n  (function (Deal) {\n    Deal[Deal[\"p0\"] = 0] = \"p0\";\n    Deal[Deal[\"p1\"] = 1] = \"p1\";\n    Deal[Deal[\"p2\"] = 2] = \"p2\";\n    Deal[Deal[\"p3\"] = 3] = \"p3\";\n    Deal[Deal[\"p4\"] = 4] = \"p4\";\n    Deal[Deal[\"p5\"] = 5] = \"p5\";\n    Deal[Deal[\"dealer\"] = 6] = \"dealer\";\n    Deal[Deal[\"hidden\"] = 7] = \"hidden\";\n  })(Deal || (Deal = {}));\n\n  let Message;\n\n  (function (Message) {\n    Message[\"bet\"] = \"Place a Bet!\";\n    Message[\"hitStand\"] = \"Hit or Stand?\";\n    Message[\"bust\"] = \"Bust!\";\n    Message[\"userWin\"] = \"You Win!\";\n    Message[\"dealerWin\"] = \"Dealer Wins!\";\n    Message[\"tie\"] = \"Tie!\";\n  })(Message || (Message = {}));\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n\n  const _useState = useState(data),\n        _useState2 = _slicedToArray(_useState, 2),\n        deck = _useState2[0],\n        setDeck = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        address = _useState4[0],\n        setAddress = _useState4[1];\n\n  const _useState5 = useState(new Array(6)),\n        _useState6 = _slicedToArray(_useState5, 2),\n        cards = _useState6[0],\n        setCards = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        p0Cards = _useState8[0],\n        setp0Cards = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        p0Score = _useState10[0],\n        setp0Score = _useState10[1];\n\n  const _useState11 = useState(0),\n        _useState12 = _slicedToArray(_useState11, 2),\n        p0Count = _useState12[0],\n        setp0Count = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        p1Cards = _useState14[0],\n        setp1Cards = _useState14[1];\n\n  const _useState15 = useState(0),\n        _useState16 = _slicedToArray(_useState15, 2),\n        p1Score = _useState16[0],\n        setp1Score = _useState16[1];\n\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        p1Count = _useState18[0],\n        setp1Count = _useState18[1];\n\n  const _useState19 = useState([]),\n        _useState20 = _slicedToArray(_useState19, 2),\n        p2Cards = _useState20[0],\n        setp2Cards = _useState20[1];\n\n  const _useState21 = useState(0),\n        _useState22 = _slicedToArray(_useState21, 2),\n        p2Score = _useState22[0],\n        setp2Score = _useState22[1];\n\n  const _useState23 = useState(0),\n        _useState24 = _slicedToArray(_useState23, 2),\n        p2Count = _useState24[0],\n        setp2Count = _useState24[1];\n\n  const _useState25 = useState([]),\n        _useState26 = _slicedToArray(_useState25, 2),\n        p3Cards = _useState26[0],\n        setp3Cards = _useState26[1];\n\n  const _useState27 = useState(0),\n        _useState28 = _slicedToArray(_useState27, 2),\n        p3Score = _useState28[0],\n        setp3Score = _useState28[1];\n\n  const _useState29 = useState(0),\n        _useState30 = _slicedToArray(_useState29, 2),\n        p3Count = _useState30[0],\n        setp3Count = _useState30[1];\n\n  const _useState31 = useState([]),\n        _useState32 = _slicedToArray(_useState31, 2),\n        p4Cards = _useState32[0],\n        setp4Cards = _useState32[1];\n\n  const _useState33 = useState(0),\n        _useState34 = _slicedToArray(_useState33, 2),\n        p4Score = _useState34[0],\n        setp4Score = _useState34[1];\n\n  const _useState35 = useState(0),\n        _useState36 = _slicedToArray(_useState35, 2),\n        p4Count = _useState36[0],\n        setp4Count = _useState36[1];\n\n  const _useState37 = useState([]),\n        _useState38 = _slicedToArray(_useState37, 2),\n        p5Cards = _useState38[0],\n        setp5Cards = _useState38[1];\n\n  const _useState39 = useState(0),\n        _useState40 = _slicedToArray(_useState39, 2),\n        p5Score = _useState40[0],\n        setp5Score = _useState40[1];\n\n  const _useState41 = useState(0),\n        _useState42 = _slicedToArray(_useState41, 2),\n        p5Count = _useState42[0],\n        setp5Count = _useState42[1];\n\n  const _useState43 = useState([]),\n        _useState44 = _slicedToArray(_useState43, 2),\n        dealerCards = _useState44[0],\n        setDealerCards = _useState44[1];\n\n  const _useState45 = useState(0),\n        _useState46 = _slicedToArray(_useState45, 2),\n        dealerScore = _useState46[0],\n        setDealerScore = _useState46[1];\n\n  const _useState47 = useState(0),\n        _useState48 = _slicedToArray(_useState47, 2),\n        dealerCount = _useState48[0],\n        setDealerCount = _useState48[1];\n\n  const _useState49 = useState(100),\n        _useState50 = _slicedToArray(_useState49, 2),\n        balance = _useState50[0],\n        setBalance = _useState50[1];\n\n  const _useState51 = useState(0),\n        _useState52 = _slicedToArray(_useState51, 2),\n        bet = _useState52[0],\n        setBet = _useState52[1];\n\n  const _useState53 = useState(GameState.init),\n        _useState54 = _slicedToArray(_useState53, 2),\n        gameState = _useState54[0],\n        setGameState = _useState54[1];\n\n  const _useState55 = useState(Message.bet),\n        _useState56 = _slicedToArray(_useState55, 2),\n        message = _useState56[0],\n        setMessage = _useState56[1];\n\n  const _useState57 = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  }),\n        _useState58 = _slicedToArray(_useState57, 2),\n        buttonState = _useState58[0],\n        setButtonState = _useState58[1];\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n  useEffect(() => {\n    calculate(p0Cards, setp0Score);\n    setp0Count(p0Count + 1);\n  }, [p0Cards]);\n  useEffect(() => {\n    calculate(p1Cards, setp1Score);\n    setp1Count(p1Count + 1);\n  }, [p1Cards]);\n  useEffect(() => {\n    calculate(p2Cards, setp2Score);\n    setp2Count(p2Count + 1);\n  }, [p2Cards]);\n  useEffect(() => {\n    calculate(p3Cards, setp3Score);\n    setp3Count(p3Count + 1);\n  }, [p3Cards]);\n  useEffect(() => {\n    calculate(p4Cards, setp4Score);\n    setp4Count(p4Count + 1);\n  }, [p4Cards]);\n  useEffect(() => {\n    calculate(p5Cards, setp5Score);\n    setp5Count(p5Count + 1);\n  }, [p5Cards]);\n  useEffect(() => {\n    calculate(dealerCards, setDealerScore);\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (p0Score === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState(_objectSpread({}, buttonState));\n      } else if (p0Score > 21) {\n        bust();\n      }\n    }\n  }, [p0Count]);\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      } else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n    setp0Cards([]);\n    setp0Score(0);\n    setp0Count(0);\n    setp1Cards([]);\n    setp1Score(0);\n    setp1Count(0);\n    setp2Cards([]);\n    setp2Score(0);\n    setp2Count(0);\n    setp3Cards([]);\n    setp3Score(0);\n    setp3Count(0);\n    setp4Cards([]);\n    setp4Score(0);\n    setp4Count(0);\n    setp5Cards([]);\n    setp5Score(0);\n    setp5Count(0);\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n    setBet(0);\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  };\n\n  const placeBet = amount => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  };\n\n  const drawCard = dealType => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      alert('All cards have been drawn');\n    }\n  };\n\n  const dealCard = (dealType, value, suit) => {\n    switch (dealType) {\n      case Deal.p0:\n        p0Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp0Cards([...p0Cards]);\n        break;\n\n      case Deal.p1:\n        p1Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp1Cards([...p0Cards]);\n        break;\n\n      case Deal.p2:\n        p2Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp2Cards([...p0Cards]);\n        break;\n\n      case Deal.p3:\n        p3Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp3Cards([...p0Cards]);\n        break;\n\n      case Deal.p4:\n        p4Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp4Cards([...p0Cards]);\n        break;\n\n      case Deal.p5:\n        p5Cards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setp5Cards([...p0Cards]);\n        break;\n\n      case Deal.dealer:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': false\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      case Deal.hidden:\n        dealerCards.push({\n          'value': value,\n          'suit': suit,\n          'hidden': true\n        });\n        setDealerCards([...dealerCards]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const revealCard = () => {\n    dealerCards.filter(card => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n\n      return card;\n    });\n    setDealerCards([...dealerCards]);\n  };\n\n  const calculate = (cards, setScore) => {\n    let total = 0;\n    cards.forEach(card => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n\n          case 'Q':\n            total += 10;\n            break;\n\n          case 'J':\n            total += 10;\n            break;\n\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter(card => {\n      return card.value === 'A';\n    });\n    aces.forEach(card => {\n      if (card.hidden === false) {\n        if (total + 11 > 21) {\n          total += 1;\n        } else if (total + 11 === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          } else {\n            total += 11;\n          }\n        } else {\n          total += 11;\n        }\n      }\n    });\n    setScore(total);\n  };\n\n  const hit = () => {\n    drawCard(Deal.p0);\n    drawCard(Deal.p1);\n    drawCard(Deal.p2);\n    drawCard(Deal.p3);\n    drawCard(Deal.p4);\n    drawCard(Deal.p5);\n  };\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  };\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState(_objectSpread({}, buttonState));\n    setMessage(Message.bust);\n  };\n\n  const checkWin = () => {\n    if (p0Score > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + bet * 2) * 100) / 100);\n      setMessage(Message.userWin);\n    } else if (dealerScore > p0Score) {\n      setMessage(Message.dealerWin);\n    } else {\n      setBalance(Math.round((balance + bet * 1) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Status, {\n    message: message,\n    balance: balance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }), React.createElement(Controls, {\n    balance: balance,\n    gameState: gameState,\n    buttonState: buttonState,\n    betEvent: placeBet,\n    hitEvent: hit,\n    standEvent: stand,\n    resetEvent: resetGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }), React.createElement(Hand, {\n    title: `Dealer's Hand (${dealerScore})`,\n    cards: dealerCards,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }), React.createElement(Hands, {\n    cardsArr: [p0Cards, p1Cards, p2Cards, p3Cards, p4Cards, p5Cards],\n    scores: [p0Score, p1Score, p2Score, p3Score, p4Score, p5Score],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lior/work/blackjack-react-app/src/components/App.tsx"],"names":["React","useState","useEffect","Status","Controls","Hand","Hands","jsonData","App","GameState","Deal","Message","data","JSON","parse","stringify","cards","deck","setDeck","address","setAddress","Array","setCards","p0Cards","setp0Cards","p0Score","setp0Score","p0Count","setp0Count","p1Cards","setp1Cards","p1Score","setp1Score","p1Count","setp1Count","p2Cards","setp2Cards","p2Score","setp2Score","p2Count","setp2Count","p3Cards","setp3Cards","p3Score","setp3Score","p3Count","setp3Count","p4Cards","setp4Cards","p4Score","setp4Score","p4Count","setp4Count","p5Cards","setp5Cards","p5Score","setp5Score","p5Count","setp5Count","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","balance","setBalance","bet","setBet","init","gameState","setGameState","message","setMessage","hitDisabled","standDisabled","resetDisabled","buttonState","setButtonState","userTurn","hitStand","calculate","bust","dealerTurn","checkWin","drawCard","dealer","resetGame","console","clear","placeBet","amount","Math","round","dealType","length","randomIndex","floor","random","card","splice","log","suit","dealCard","value","alert","p0","push","p1","p2","p3","p4","p5","hidden","revealCard","filter","setScore","total","forEach","Number","aces","hit","stand","userWin","dealerWin","tie"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport Hands from './Hands';\nimport jsonData from '../deck.json';\n\nconst App: React.FC = () => {\n  enum GameState {\n    bet,\n    init,\n    userTurn,\n    dealerTurn\n  }\n\n  enum Deal {\n    p0,\n    p1,\n    p2,\n    p3,\n    p4,\n    p5,\n    dealer,\n    hidden\n  }\n\n  enum Message {\n    bet = 'Place a Bet!',\n    hitStand = 'Hit or Stand?',\n    bust = 'Bust!',\n    userWin = 'You Win!',\n    dealerWin = 'Dealer Wins!',\n    tie = 'Tie!'\n  }\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n  const [deck, setDeck]: any[] = useState(data);\n\n  const [address, setAddress] = useState(\"\");\n\n  const [cards, setCards]: any[] = useState(new Array(6));\n  const [p0Cards, setp0Cards]: any[] = useState([]);\n  const [p0Score, setp0Score] = useState(0);\n  const [p0Count, setp0Count] = useState(0);\n\n  const [p1Cards, setp1Cards]: any[] = useState([]);\n  const [p1Score, setp1Score] = useState(0);\n  const [p1Count, setp1Count] = useState(0);\n\n  const [p2Cards, setp2Cards]: any[] = useState([]);\n  const [p2Score, setp2Score] = useState(0);\n  const [p2Count, setp2Count] = useState(0);\n\n  const [p3Cards, setp3Cards]: any[] = useState([]);\n  const [p3Score, setp3Score] = useState(0);\n  const [p3Count, setp3Count] = useState(0);\n\n  const [p4Cards, setp4Cards]: any[] = useState([]);\n  const [p4Score, setp4Score] = useState(0);\n  const [p4Count, setp4Count] = useState(0);\n\n  const [p5Cards, setp5Cards]: any[] = useState([]);\n  const [p5Score, setp5Score] = useState(0);\n  const [p5Count, setp5Count] = useState(0);\n\n  const [dealerCards, setDealerCards]: any[] = useState([]);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [dealerCount, setDealerCount] = useState(0);\n\n  const [balance, setBalance] = useState(100);\n  const [bet, setBet] = useState(0);\n\n  const [gameState, setGameState] = useState(GameState.init);\n  const [message, setMessage] = useState(Message.bet);\n  const [buttonState, setButtonState] = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    calculate(p0Cards, setp0Score);\n    setp0Count(p0Count + 1);\n  }, [p0Cards]);\n\n  useEffect(() => {\n    calculate(p1Cards, setp1Score);\n    setp1Count(p1Count + 1);\n  }, [p1Cards]);\n\n  useEffect(() => {\n    calculate(p2Cards, setp2Score);\n    setp2Count(p2Count + 1);\n  }, [p2Cards]);\n\n  useEffect(() => {\n    calculate(p3Cards, setp3Score);\n    setp3Count(p3Count + 1);\n  }, [p3Cards]);\n\n  useEffect(() => {\n    calculate(p4Cards, setp4Score);\n    setp4Count(p4Count + 1);\n  }, [p4Cards]);\n\n  useEffect(() => {\n    calculate(p5Cards, setp5Score);\n    setp5Count(p5Count + 1);\n  }, [p5Cards]);\n\n  useEffect(() => {\n    calculate(dealerCards, setDealerScore);\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (p0Score === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState({ ...buttonState });\n      }\n      else if (p0Score > 21) {\n        bust();\n      }\n    }\n  }, [p0Count]);\n\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      }\n      else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n\n    setp0Cards([]);\n    setp0Score(0);\n    setp0Count(0);\n\n    setp1Cards([]);\n    setp1Score(0);\n    setp1Count(0);\n\n    setp2Cards([]);\n    setp2Score(0);\n    setp2Count(0);\n\n    setp3Cards([]);\n    setp3Score(0);\n    setp3Count(0);\n\n    setp4Cards([]);\n    setp4Score(0);\n    setp4Count(0);\n\n    setp5Cards([]);\n    setp5Score(0);\n    setp5Count(0);\n\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n\n    setBet(0);\n\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  }\n\n  const placeBet = (amount: number) => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  }\n\n  const drawCard = (dealType: Deal) => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n        default:\n          break;\n      }\n    }\n    else {\n      alert('All cards have been drawn');\n    }\n  }\n\n  const dealCard = (dealType: Deal, value: string, suit: string) => {\n    switch (dealType) {\n      case Deal.p0:\n        p0Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp0Cards([...p0Cards]);\n        break;\n      case Deal.p1:\n        p1Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp1Cards([...p0Cards]);\n        break;\n      case Deal.p2:\n        p2Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp2Cards([...p0Cards]);\n        break;\n      case Deal.p3:\n        p3Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp3Cards([...p0Cards]);\n        break;\n      case Deal.p4:\n        p4Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp4Cards([...p0Cards]);\n        break;\n      case Deal.p5:\n        p5Cards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setp5Cards([...p0Cards]);\n        break;\n      case Deal.dealer:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setDealerCards([...dealerCards]);\n        break;\n      case Deal.hidden:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\n        setDealerCards([...dealerCards]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const revealCard = () => {\n    dealerCards.filter((card: any) => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n      return card;\n    });\n    setDealerCards([...dealerCards])\n  }\n\n  const calculate = (cards: any[], setScore: any) => {\n    let total = 0;\n    cards.forEach((card: any) => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n          case 'Q':\n            total += 10;\n            break;\n          case 'J':\n            total += 10;\n            break;\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter((card: any) => {\n      return card.value === 'A';\n    });\n    aces.forEach((card: any) => {\n      if (card.hidden === false) {\n        if ((total + 11) > 21) {\n          total += 1;\n        }\n        else if ((total + 11) === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          }\n          else {\n            total += 11;\n          }\n        }\n        else {\n          total += 11;\n        }\n      }\n    });\n    setScore(total);\n  }\n\n  const hit = () => {\n    drawCard(Deal.p0);\n    drawCard(Deal.p1);\n    drawCard(Deal.p2);\n    drawCard(Deal.p3);\n    drawCard(Deal.p4);\n    drawCard(Deal.p5);\n  }\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  }\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setMessage(Message.bust);\n  }\n\n  const checkWin = () => {\n    if (p0Score > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + (bet * 2)) * 100) / 100);\n      setMessage(Message.userWin);\n    }\n    else if (dealerScore > p0Score) {\n      setMessage(Message.dealerWin);\n    }\n    else {\n      setBalance(Math.round((balance + (bet * 1)) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  }\n\n  return (\n    <>\n      <Status message={message} balance={balance} />\n      <Controls\n        balance={balance}\n        gameState={gameState}\n        buttonState={buttonState}\n        betEvent={placeBet}\n        hitEvent={hit}\n        standEvent={stand}\n        resetEvent={resetGame}\n      />\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\n      <Hands cardsArr= {[p0Cards, p1Cards,p2Cards,p3Cards,p4Cards,p5Cards]} scores= {[p0Score, p1Score,p2Score, p3Score,p4Score, p5Score]}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}